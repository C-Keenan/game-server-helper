#!/usr/bin/env bash
if ! [ -d /tmp/gsh ]
then
  mkdir -p /tmp/gsh
fi
if ! [ -f /tmp/gsh/donation-ticker.env ]
then
  touch /tmp/gsh/donation-ticker.env
fi
if [ -f /usr/bin/sudo ]
then
  if [ "$1" == "factorio" ]
  then
    fi="/usr/gsh/docker/factorio/docker-compose.yml"
    if [ "$2" == "up" ]
    then
      docker compose -f /usr/gsh/docker/factorio/docker-compose.yml up -d
    elif [ "$2" == "down" ]
    then
      if [ "$3" == "--now" ]
      then
        docker compose -f /usr/gsh/docker/factorio/docker-compose.yml down
      else
        x=$(($(cat /usr/gsh/docker/factorio/config/server-settings.json | jq .autosave_interval)*60))
        while [ $x -ge 0 ]
        do
          if [ $x -gt 0 ]
          then
            clear
            printf '%dh:%dm:%ds\n' $(($x/3600)) $(($x%3600/60)) $(($x%60))
            x=$((x-1))
            sleep 0.999999999999
          else
            docker compose -f /usr/gsh/docker/factorio/docker-compose.yml down
            break
          fi
        done
      fi
    elif [ "$2" == "logs" ]
    then
      docker compose -f /usr/gsh/docker/factorio/docker-compose.yml logs
    elif [ "$2" == "pull" ]
    then
      docker compose -f /usr/gsh/docker/factorio/docker-compose.yml pull
    elif [ "$2" == "tail-logs" ]
    then
      docker compose -f /usr/gsh/docker/factorio/docker-compose.yml logs -f
    elif [ "$2" == "restart" ]
    then
      docker compose -f /usr/gsh/docker/factorio/docker-compose.yml restart
    elif [ "$2" == "recreate" ]
    then
      docker compose -f /usr/gsh/docker/factorio/docker-compose.yml up -d --force-recreate
    elif [ "$2" == "archive" ]
    then
      status=$(docker ps -a --format json | grep factorio | jq .State)
      echo "Were you playing a modded versions of factorio? y/N"
      echo "Reply with 'Y' if any mods were used and with 'N' if ABSOLUTLY no mods were used in the playthrough. If you reply with 'N' the prefix used will be 'PURE-VANILLA' and it will overwrite any already created archive file with that prefix."
      read ans
      ans=$(echo "$ans" | awk '{print toupper($0)}')
      if [ "$ans" == "Y" ]
      then
        echo "What name would best describe the general theme of the playthrough? You can type anything and it will be prefixed to the archive file name. 'Modded' in this scenario means things like space exploration playthroughs and such so if you just played a lightly modded vanilla run please type things like 'vanilla' to differentiate them."
        read ans2
        ans2=$(echo "$ans2" | awk '{print toupper($0)}')
          if [ "$status" == '"running"' ]
          then
            docker compose -f $fi down
            mkdir -p $PWD/gsh-factorio-save-archives
            sudo tar -czf $PWD/gsh-factorio-save-archives/$ans2.gsh-docker-archive.tar.gz /usr/gsh/docker/factorio/saves
          else
            mkdir -p $PWD/gsh-factorio-save-archives
            sudo tar -czf $PWD/gsh-factorio-save-archives/$ans2.gsh-docker-archive.tar.gz /usr/gsh/docker/factorio/saves
          fi
      else
        if [ "$status" == '"running"' ]
        then
          docker compose -f $fi down
          mkdir -p $PWD/gsh-factorio-save-archives
          sudo tar -czf $PWD/gsh-factorio-save-archives/PURE-VANILLA.gsh-docker-archive.tar.gz /usr/gsh/docker/factorio/saves
        else
          mkdir -p $PWD/gsh-factorio-save-archives
          sudo tar -czf $PWD/gsh-factorio-save-archives/PURE-VANILLA.gsh-docker-archive.tar.gz /usr/gsh/docker/factorio/saves
        fi
      fi
    elif [ "$2" == "--help" ]
    then
      cat /usr/gsh/messages/help/factorio-help.txt
      printf '\n'
    elif [ "$2" == "" ]
    then
      cat /usr/gsh/messages/help/factorio-help.txt
      printf '\n'
    fi
  elif [ "$1" == "satisfactory" ]
  then
    fi="/usr/gsh/docker/satisfactory/docker-compose.yml"
    envfi="/usr/gsh/docker/satisfactory/satisfactory.env"
    if [ "$2" == "up" ]
    then
      docker compose -f $fi up -d
    elif [ "$2" == "down" ]
    then
      docker compose -f $fi down
    elif [ "$2" == "logs" ]
    then
      docker compose -f $fi logs
    elif [ "$2" == "pull" ]
    then
      docker compose -f $fi pull
    elif [ "$2" == "tail-logs" ]
    then
      docker compose -f $fi logs -f
    elif [ "$2" == "restart" ]
    then
      docker compose -f $fi restart
    elif [ "$2" == "recreate" ]
    then
      docker compose -f $fi up -d --force-recreate
    elif [ "$2" == "update" ]
    then
      curvar=$(cat $envfi | grep "SKIPUPDATE")
      repvar="SKIPUPDATE=false"
      constat=$(docker ps -a --format json | grep satisfactory | jq .State)
      sudo sed -i "s.$curvar.$repvar.g" $envfi
      docker compose -f $fi down
      docker compose -f $fi pull
      docker compose -f $fi up -d
      c=0
      while [[ $c -ne 1 ]]
      do
        docker compose -f $fi logs > /tmp/container-logs.log
        conterm="LogServer: Display: Server API listening on '0.0.0.0:7777'"
        if grep -Fq "$conterm" /tmp/container-logs.log
        then
          c=1
        else
          c=0
        fi
        sleep 5
      done
      docker compose -f $fi down
      sudo sed -i "s.$repvar.$curvar.g" $envfi
      if [ "$constat" == '"running"' ]
      then
        docker compose -f $fi up -d
      fi
    elif [ "$2" == "--help" ]
    then
      cat /usr/gsh/messages/help/satisfactory-help.txt
      printf '\n'
    elif [ "$2" == "" ]
    then
      cat /usr/gsh/messages/help/satisfactory-help.txt
      printf '\n'
    fi
  elif [ "$1" == "veloren" ]
  then
    if [ "$2" == "up" ]
    then
      docker compose -f /usr/gsh/docker/veloren/docker-compose.yml up -d
    elif [ "$2" == "down" ]
    then
      docker compose -f /usr/gsh/docker/veloren/docker-compose.yml down
    elif [ "$2" == "logs" ]
    then
      docker compose -f /usr/gsh/docker/veloren/docker-compose.yml logs
    elif [ "$2" == "pull" ]
    then
      docker compose -f /usr/gsh/docker/veloren/docker-compose.yml pull
    elif [ "$2" == "tail-logs" ]
    then
      docker compose -f /usr/gsh/docker/veloren/docker-compose.yml logs -f
    elif [ "$2" == "restart" ]
    then
      docker compose -f /usr/gsh/docker/veloren/docker-compose.yml restart
    elif [ "$2" == "recreate" ]
    then
      docker compose -f /usr/gsh/docker/veloren/docker-compose.yml up -d --force-recreate
    elif [ "$2" == "--help" ]
    then
      cat /usr/gsh/messages/help/veloren-help.txt
      printf '\n'
    elif [ "$2" == "" ]
    then
      cat /usr/gsh/messages/help/veloren-help.txt
      printf '\n'
    fi
  elif [ "$1" == "minecraft" ]
  then
    if [ "$2" == "up" ]
    then
      docker compose -f /usr/gsh/docker/minecraft/docker-compose.yml up -d
    elif [ "$2" == "down" ]
    then
      docker compose -f /usr/gsh/docker/minecraft/docker-compose.yml down
    elif [ "$2" == "logs" ]
    then
      docker compose -f /usr/gsh/docker/minecraft/docker-compose.yml logs
    elif [ "$2" == "pull" ]
    then
      docker compose -f /usr/gsh/docker/minecraft/docker-compose.yml pull
    elif [ "$2" == "tail-logs" ]
    then
      docker compose -f /usr/gsh/docker/minecraft/docker-compose.yml logs -f
    elif [ "$2" == "restart" ]
    then
      docker compose -f /usr/gsh/docker/minecraft/docker-compose.yml restart
    elif [ "$2" == "recreate" ]
    then
      docker compose -f /usr/gsh/docker/minecraft/docker-compose.yml up -d --force-recreate
    elif [ "$2" == "--help" ]
    then
      cat /usr/gsh/messages/help/minecraft-help.txt
      printf '\n'
    elif [ "$2" == "" ]
    then
      cat /usr/gsh/messages/help/minecraft-help.txt
      printf '\n'
    fi
  elif [ "$1" == "uninstall" ]
  then
    bash /usr/gsh/script-files/uninstall
  elif [ "$1" == "recover" ]
  then
    if [ -d /tmp/gsh ]
    then
      echo "Understood. Moving files back to their original location. Please wait..."
      sudo mv /tmp/gsh /usr
      echo "Moving of files has been completed. Thank you for your patience."
    else
      if [ -f /usr/gsh/environment/backup.env ]
      then
        source /usr/gsh/environment/backup.env
        echo "Folder `/tmp/gsh` does not exist. This can be because you have not run the `gsh uninstall` command or because the system was restarted after the uninstall process. If you have run the uninstall command and the folder no longer exists you may find that your backups located at /home/$USER/gsh-backups is still intact and the necessary scripts to restore the last backup are located within that folder. Please run the restore script and all should be as it was as of the last backup which occured on $lastbk"
      fi
      echo "Folder `/tmp/gsh` does not exist. This can be because you have not run the `gsh uninstall` command or because the system was restarted after the uninstall process. If you have run the uninstall command and the folder no longer exists then your files are gone for good and you must start over as a backup has never been run before."
    fi
  elif [ "$1" == "time" ]
  then
    time=$(date | colrm 1 11 | colrm 9)
    h=$(echo $time | awk -F ":" '{print $1}')
    m=$(echo $time | awk -F ":" '{print $2}')
    s=$(echo $time | awk -F ":" '{print $3}')
    if [ -f /usr/gsh/environment/restart.env ]
    then
      source /usr/gsh/environment/restart.env
    fi
    if [[ $h -eq $reshr ]]
    then
      if [[ $m -eq $resmin ]]
      then
        if [ -f /usr/gsh/environment/notification.env ]
        then
          source /usr/gsh/environment/notification.env
          msg="Server restarting in 15 minutes!"
          curl -u $usr:$pswd -d "$msg" $url
          echo $msg >> /var/log/gsh/alerts.log
        else
          msg="Server restarting in 15 minutes!"
          echo $msg >> /var/log/gsh/alerts.log
        fi
      fi
    fi
  elif [ "$1" == "--help" ]
  then
    cat /usr/gsh/messages/help/help.txt
    printf '\n'
  elif [ "$1" == "" ]
  then
    cat /usr/gsh/messages/help/help.txt
    printf '\n'
  fi
  source /usr/gsh/environment/donation-ctrl.env
  if [ "$donationmessage" -eq 0 ]
  then
    source /usr/gsh/environment/donation-ticker.env
    if [ $dt -ne 0 ]
    then
      if (( dt % 3 == 0 && dt % 10 == 0 ))
      then
        echo "Thank you for using 'Game Server Helper'. If you have found it helpful and would like to support the project, and others, please head on over to my KoFi: 'https://ko-fi.com/lollypopstealer'. Any support you can show would be greatly appreciated. Thank you again for using 'Game Server Helper'."
      fi
    fi
    dt=$(( $dt + 1 ))
    echo "dt=$dt" > /tmp/gsh/donation-ticker.env
    cp /tmp/gsh/donation-ticker.env /usr/gsh/environment/donation-ticker.env
  fi
else
  if [ "$1" == "factorio" ]
  then
    fi="/usr/gsh/docker/factorio/docker-compose.yml"
    if [ "$2" == "up" ]
    then
      docker compose -f /usr/gsh/docker/factorio/docker-compose.yml up -d
    elif [ "$2" == "down" ]
    then
      if [ "$3" == "--now" ]
      then
        docker compose -f /usr/gsh/docker/factorio/docker-compose.yml down
      else
        x=$(($(cat /usr/gsh/docker/factorio/config/server-settings.json | jq .autosave_interval)*60))
        while [ $x -ge 0 ]
        do
          if [ $x -gt 0 ]
          then
            clear
            printf '%dh:%dm:%ds\n' $(($x/3600)) $(($x%3600/60)) $(($x%60))
            x=$((x-1))
            sleep 0.999999999999
          else
            docker compose -f /usr/gsh/docker/factorio/docker-compose.yml down
            break
          fi
        done
      fi
    elif [ "$2" == "logs" ]
    then
      docker compose -f /usr/gsh/docker/factorio/docker-compose.yml logs
    elif [ "$2" == "pull" ]
    then
      docker compose -f /usr/gsh/docker/factorio/docker-compose.yml pull
    elif [ "$2" == "tail-logs" ]
    then
      docker compose -f /usr/gsh/docker/factorio/docker-compose.yml logs -f
    elif [ "$2" == "restart" ]
    then
      docker compose -f /usr/gsh/docker/factorio/docker-compose.yml restart
    elif [ "$2" == "recreate" ]
    then
      docker compose -f /usr/gsh/docker/factorio/docker-compose.yml up -d --force-recreate
    elif [ "$2" == "archive" ]
    then
      status=$(docker ps -a --format json | grep factorio | jq .State)
      echo "Were you playing a modded versions of factorio? y/N"
      echo "Reply with 'Y' if any mods were used and with 'N' if ABSOLUTLY no mods were used in the playthrough. If you reply with 'N' the prefix used will be 'PURE-VANILLA' and it will overwrite any already created archive file with that prefix."
      read ans
      ans=$(echo "$ans" | awk '{print toupper($0)}')
      if [ "$ans" == "Y" ]
      then
        echo "What name would best describe the general theme of the playthrough? You can type anything and it will be prefixed to the archive file name. 'Modded' in this scenario means things like space exploration playthroughs and such so if you just played a lightly modded vanilla run please type things like 'vanilla' to differentiate them."
        read ans2
        ans2=$(echo "$ans2" | awk '{print toupper($0)}')
          if [ "$status" == '"running"' ]
          then
            docker compose -f $fi down
            mkdir -p $PWD/gsh-factorio-save-archives
            tar -czf $PWD/gsh-factorio-save-archives/$ans2.gsh-docker-archive.tar.gz /usr/gsh/docker/factorio/saves
          else
            mkdir -p $PWD/gsh-factorio-save-archives
            tar -czf $PWD/gsh-factorio-save-archives/$ans2.gsh-docker-archive.tar.gz /usr/gsh/docker/factorio/saves
          fi
      else
        if [ "$status" == '"running"' ]
        then
          docker compose -f $fi down
          mkdir -p $PWD/gsh-factorio-save-archives
          tar -czf $PWD/gsh-factorio-save-archives/PURE-VANILLA.gsh-docker-archive.tar.gz /usr/gsh/docker/factorio/saves
        else
          mkdir -p $PWD/gsh-factorio-save-archives
          tar -czf $PWD/gsh-factorio-save-archives/PURE-VANILLA.gsh-docker-archive.tar.gz /usr/gsh/docker/factorio/saves
        fi
      fi
    elif [ "$2" == "--help" ]
    then
      cat /usr/gsh/messages/help/factorio-help.txt
      printf '\n'
    elif [ "$2" == "" ]
    then
      cat /usr/gsh/messages/help/factorio-help.txt
      printf '\n'
    fi
  elif [ "$1" == "satisfactory" ]
  then
    if [ "$2" == "up" ]
    then
      docker compose -f $fi up -d
    elif [ "$2" == "down" ]
    then
      docker compose -f $fi down
    elif [ "$2" == "logs" ]
    then
      docker compose -f $fi logs
    elif [ "$2" == "pull" ]
    then
      docker compose -f $fi pull
    elif [ "$2" == "tail-logs" ]
    then
      docker compose -f $fi logs -f
    elif [ "$2" == "restart" ]
    then
      docker compose -f $fi restart
    elif [ "$2" == "recreate" ]
    then
      docker compose -f $fi up -d --force-recreate
    elif [ "$2" == "update" ]
    then
      curvar=$(cat $envfi | grep "SKIPUPDATE")
      repvar="SKIPUPDATE=false"
      constat=$(docker ps -a --format json | grep satisfactory | jq .State)
      sed -i "s.$curvar.$repvar.g" $envfi
      docker compose -f $fi down
      docker compose -f $fi pull
      docker compose -f $fi up -d
      c=0
      while [[ $c -ne 1 ]]
      do
        docker compose -f $fi logs > /tmp/container-logs.log
        conterm="LogServer: Display: Server API listening on '0.0.0.0:7777'"
        if grep -Fq "$conterm" /tmp/container-logs.log
        then
          c=1
        else
          c=0
        fi
        sleep 5
      done
      docker compose -f $fi down
      sed -i "s.$repvar.$curvar.g" $envfi
      if [ "$constat" == '"running"' ]
      then
        docker compose -f $fi up -d
      fi
    elif [ "$2" == "--help" ]
    then
      cat /usr/gsh/messages/help/satisfactory-help.txt
      printf '\n'
    elif [ "$2" == "" ]
    then
      cat /usr/gsh/messages/help/satisfactory-help.txt
      printf '\n'
    fi
  elif [ "$1" == "veloren" ]
  then
    if [ "$2" == "up" ]
    then
      docker compose -f /usr/gsh/docker/veloren/docker-compose.yml up -d
    elif [ "$2" == "down" ]
    then
      docker compose -f /usr/gsh/docker/veloren/docker-compose.yml down
    elif [ "$2" == "logs" ]
    then
      docker compose -f /usr/gsh/docker/veloren/docker-compose.yml logs
    elif [ "$2" == "pull" ]
    then
      docker compose -f /usr/gsh/docker/veloren/docker-compose.yml pull
    elif [ "$2" == "tail-logs" ]
    then
      docker compose -f /usr/gsh/docker/veloren/docker-compose.yml logs -f
    elif [ "$2" == "restart" ]
    then
      docker compose -f /usr/gsh/docker/veloren/docker-compose.yml restart
    elif [ "$2" == "recreate" ]
    then
      docker compose -f /usr/gsh/docker/veloren/docker-compose.yml up -d --force-recreate
    elif [ "$2" == "--help" ]
    then
      cat /usr/gsh/messages/help/veloren-help.txt
      printf '\n'
    elif [ "$2" == "" ]
    then
      cat /usr/gsh/messages/help/veloren-help.txt
      printf '\n'
    fi
  elif [ "$1" == "minecraft" ]
  then
    if [ "$2" == "up" ]
    then
      docker compose -f /usr/gsh/docker/minecraft/docker-compose.yml up -d
    elif [ "$2" == "down" ]
    then
      docker compose -f /usr/gsh/docker/minecraft/docker-compose.yml down
    elif [ "$2" == "logs" ]
    then
      docker compose -f /usr/gsh/docker/minecraft/docker-compose.yml logs
    elif [ "$2" == "pull" ]
    then
      docker compose -f /usr/gsh/docker/minecraft/docker-compose.yml pull
    elif [ "$2" == "tail-logs" ]
    then
      docker compose -f /usr/gsh/docker/minecraft/docker-compose.yml logs -f
    elif [ "$2" == "restart" ]
    then
      docker compose -f /usr/gsh/docker/minecraft/docker-compose.yml restart
    elif [ "$2" == "recreate" ]
    then
      docker compose -f /usr/gsh/docker/minecraft/docker-compose.yml up -d --force-recreate
    elif [ "$2" == "--help" ]
    then
      cat /usr/gsh/messages/help/minecraft-help.txt
      printf '\n'
    elif [ "$2" == "" ]
    then
      cat /usr/gsh/messages/help/minecraft-help.txt
      printf '\n'
    fi
  elif [ "$1" == "uninstall" ]
  then
    bash /usr/gsh/script-files/uninstall
  elif [ "$1" == "time" ]
  then
    time=$(date | colrm 1 11 | colrm 9)
    h=$(echo $time | awk -F ":" '{print $1}')
    m=$(echo $time | awk -F ":" '{print $2}')
    s=$(echo $time | awk -F ":" '{print $3}')
    if [ -f /usr/gsh/environment/restart.env ]
    then
      source /usr/gsh/environment/restart.env
    fi
    if [[ $h -eq $reshr ]]
    then
      if [[ $m -eq $resmin ]]
      then
        if [ -f /usr/gsh/environment/notification.env ]
        then
          source /usr/gsh/environment/notification.env
          msg="Server restarting in 15 minutes!"
          curl -u $usr:$pswd -d "$msg" $url
          echo $msg >> /var/log/gsh/alerts.log
        else
          msg="Server restarting in 15 minutes!"
          echo $msg >> /var/log/gsh/alerts.log
        fi
      fi
    fi
  elif [ "$1" == "--help" ]
  then
    cat /usr/gsh/messages/help/help.txt
    printf '\n'
  elif [ "$1" == "" ]
  then
    cat /usr/gsh/messages/help/help.txt
    printf '\n'
  fi
  source /usr/gsh/environment/donation-ctrl.env
  if [ "$donationmessage" -eq 0 ]
  then
    source /usr/gsh/environment/donation-ticker.env
    if [ $dt -ne 0 ]
    then
      if (( dt % 3 == 0 && dt % 10 == 0 ))
      then
        echo "Thank you for using 'Game Server Helper'. If you have found it helpful and would like to support the project, and others, please head on over to my KoFi: 'https://ko-fi.com/lollypopstealer'. Any support you can show would be greatly appreciated. Thank you again for using 'Game Server Helper'."
      fi
    fi
    dt=$(($dt+1))
    echo "dt=$dt" > /tmp/gsh/donation-ticker.env
    cp /tmp/gsh/donation-ticker.env /usr/gsh/environment/donation-ticker.env
  fi
fi